// GENERATED BY METAGEN

package com.rushingvise.metagen.sql;

public class ExpressionBuilderApi  {

    public interface IExpressionTransition {
        ExpressionBuilderApi.PostExpressionStep tableColumn(String table, String column);
        ExpressionBuilderApi.PostExpressionStep column(String column);
        ExpressionBuilderApi.PostExpressionStep string(String value);
        ExpressionBuilderApi.PostExpressionStep number(int value);
        ExpressionBuilderApi.PostExpressionStep expression(Types.Expression expression);
    }

    public interface IBinaryOperationTransition {
        ExpressionBuilderApi.PostBinaryOperationStep equals();
        ExpressionBuilderApi.PostBinaryOperationStep lessThan();
        ExpressionBuilderApi.PostBinaryOperationStep lessThanOrEqual();
        ExpressionBuilderApi.PostBinaryOperationStep greaterThan();
        ExpressionBuilderApi.PostBinaryOperationStep greaterThanOrEqual();
        ExpressionBuilderApi.PostBinaryOperationStep and();
        ExpressionBuilderApi.PostBinaryOperationStep or();
        ExpressionBuilderApi.PostBinaryOperationStep plus();
        ExpressionBuilderApi.PostBinaryOperationStep minus();
    }

    public interface IBuildExpressionTransformation {
        Types.Expression build();
    }

    public static class PostExpressionStep implements IBuildExpressionTransformation, IBinaryOperationTransition {
        private  ExpressionBuilderImpl.Content content;

        public PostExpressionStep(ExpressionBuilderImpl.Content _content) {
            content = _content;
        }

        @Override
        public Types.Expression build() {
            return ExpressionBuilderImpl.Logic.buildExpressionTransformationBuild(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep equals() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionEquals(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep lessThan() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionLessThan(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep lessThanOrEqual() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionLessThanOrEqual(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep greaterThan() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionGreaterThan(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep greaterThanOrEqual() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionGreaterThanOrEqual(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep and() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionAnd(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep or() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionOr(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep plus() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionPlus(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostBinaryOperationStep minus() {
            ExpressionBuilderImpl.Logic.binaryOperationTransitionMinus(content);
            return new ExpressionBuilderApi.PostBinaryOperationStep(content);
        }

    }
    public static class PostBinaryOperationStep implements IExpressionTransition {
        private  ExpressionBuilderImpl.Content content;

        public PostBinaryOperationStep(ExpressionBuilderImpl.Content _content) {
            content = _content;
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep tableColumn(String table, String column) {
            ExpressionBuilderImpl.Logic.expressionTransitionTableColumn(content, table, column);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep column(String column) {
            ExpressionBuilderImpl.Logic.expressionTransitionColumn(content, column);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep string(String value) {
            ExpressionBuilderImpl.Logic.expressionTransitionString(content, value);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep number(int value) {
            ExpressionBuilderImpl.Logic.expressionTransitionNumber(content, value);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep expression(Types.Expression expression) {
            ExpressionBuilderImpl.Logic.expressionTransitionExpression(content, expression);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

    }
    public static class ExpressionStep implements IExpressionTransition {
        private  ExpressionBuilderImpl.Content content;

        public ExpressionStep(ExpressionBuilderImpl.Content _content) {
            content = _content;
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep tableColumn(String table, String column) {
            ExpressionBuilderImpl.Logic.expressionTransitionTableColumn(content, table, column);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep column(String column) {
            ExpressionBuilderImpl.Logic.expressionTransitionColumn(content, column);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep string(String value) {
            ExpressionBuilderImpl.Logic.expressionTransitionString(content, value);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep number(int value) {
            ExpressionBuilderImpl.Logic.expressionTransitionNumber(content, value);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

        @Override
        public ExpressionBuilderApi.PostExpressionStep expression(Types.Expression expression) {
            ExpressionBuilderImpl.Logic.expressionTransitionExpression(content, expression);
            return new ExpressionBuilderApi.PostExpressionStep(content);
        }

    }
}

// GENERATED BY METAGEN
#include "ExpressionBuilderApi.h"

using namespace sql;

ExpressionBuilderApi::PostExpressionStep::PostExpressionStep(ExpressionBuilderImpl::Content _content) {
    content = _content;
}

Types::Expression ExpressionBuilderApi::PostExpressionStep::build() {
    return ExpressionBuilderImpl::Logic::buildExpressionTransformationBuild(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::equals() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionEquals(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::lessThan() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionLessThan(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::lessThanOrEqual() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionLessThanOrEqual(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::greaterThan() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionGreaterThan(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::greaterThanOrEqual() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionGreaterThanOrEqual(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::_and() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionAnd(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::_or() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionOr(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::plus() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionPlus(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep ExpressionBuilderApi::PostExpressionStep::minus() {
    ExpressionBuilderImpl::Logic::binaryOperationTransitionMinus(content);
    return ExpressionBuilderApi::PostBinaryOperationStep(content);
}

ExpressionBuilderApi::PostBinaryOperationStep::PostBinaryOperationStep(ExpressionBuilderImpl::Content _content) {
    content = _content;
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::PostBinaryOperationStep::tableColumn(std::string table, std::string column) {
    ExpressionBuilderImpl::Logic::expressionTransitionTableColumn(content, table, column);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::PostBinaryOperationStep::column(std::string column) {
    ExpressionBuilderImpl::Logic::expressionTransitionColumn(content, column);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::PostBinaryOperationStep::string(std::string value) {
    ExpressionBuilderImpl::Logic::expressionTransitionString(content, value);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::PostBinaryOperationStep::number(int value) {
    ExpressionBuilderImpl::Logic::expressionTransitionNumber(content, value);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::PostBinaryOperationStep::expression(Types::Expression expression) {
    ExpressionBuilderImpl::Logic::expressionTransitionExpression(content, expression);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::ExpressionStep::ExpressionStep(ExpressionBuilderImpl::Content _content) {
    content = _content;
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::ExpressionStep::tableColumn(std::string table, std::string column) {
    ExpressionBuilderImpl::Logic::expressionTransitionTableColumn(content, table, column);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::ExpressionStep::column(std::string column) {
    ExpressionBuilderImpl::Logic::expressionTransitionColumn(content, column);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::ExpressionStep::string(std::string value) {
    ExpressionBuilderImpl::Logic::expressionTransitionString(content, value);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::ExpressionStep::number(int value) {
    ExpressionBuilderImpl::Logic::expressionTransitionNumber(content, value);
    return ExpressionBuilderApi::PostExpressionStep(content);
}

ExpressionBuilderApi::PostExpressionStep ExpressionBuilderApi::ExpressionStep::expression(Types::Expression expression) {
    ExpressionBuilderImpl::Logic::expressionTransitionExpression(content, expression);
    return ExpressionBuilderApi::PostExpressionStep(content);
}


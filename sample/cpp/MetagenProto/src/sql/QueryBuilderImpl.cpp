// GENERATED BY METAGEN
#include "QueryBuilderImpl.h"

using namespace sql;

static void append(std::ostringstream &output, const std::vector<std::string> &items, const char seperator = ',') {
    for (size_t i = 0; i < items.size(); ++i) {
        if (i != 0) {
            output << seperator;
        }
        output << items[i];
    }
}

void QueryBuilderImpl::Logic::selectTransitionSelect(QueryBuilderImpl::Content content, std::vector<std::string> columns) {
    (*content.query) << "SELECT ";
    append(*content.query, columns);
    (*content.query) << " ";
}

void QueryBuilderImpl::Logic::fromTransitionFrom(QueryBuilderImpl::Content content, std::string table) {
    (*content.query) << "FROM " << table << " ";
}

void QueryBuilderImpl::Logic::whereTransitionWhere(QueryBuilderImpl::Content content, std::string expression) {
    (*content.query) << "WHERE (" << expression << ") ";
}

void QueryBuilderImpl::Logic::groupByTransitionGroupBy(QueryBuilderImpl::Content content, std::string column) {
    (*content.query) << "GROUP BY " << column << " ";
}

void QueryBuilderImpl::Logic::orderByTransitionOrderBy(QueryBuilderImpl::Content content, std::vector<std::string> columns) {
    (*content.query) << "ORDER BY ";
    append(*content.query, columns);
    (*content.query) << " ";
}

void QueryBuilderImpl::Logic::orderDirectionTransitionAsc(QueryBuilderImpl::Content content) {
    (*content.query) << "ASC ";
}

void QueryBuilderImpl::Logic::orderDirectionTransitionDesc(QueryBuilderImpl::Content content) {
    (*content.query) << "DESC ";
}

std::string QueryBuilderImpl::Logic::buildQueryTransformationBuild(QueryBuilderImpl::Content content) {
    return content.query->str();
}


// GENERATED BY METAGEN
#pragma once

#include <memory>
#include <string>
#include <vector>
#include "ExpressionBuilderImpl.h"

namespace sql {

class ExpressionBuilderApi  {
    public:
    class IExpressionTransition;
    class IBinaryOperationTransition;
    class IBuildExpressionTransformation;
    class PostExpressionStep;
    class PostBinaryOperationStep;
    class ExpressionStep;

    class IExpressionTransition {
        virtual ExpressionBuilderApi::PostExpressionStep tableColumn(std::string table, std::string column) =0;
        virtual ExpressionBuilderApi::PostExpressionStep column(std::string column) =0;
        virtual ExpressionBuilderApi::PostExpressionStep string(std::string value) =0;
        virtual ExpressionBuilderApi::PostExpressionStep number(int value) =0;
        virtual ExpressionBuilderApi::PostExpressionStep expression(Types::Expression expression) =0;
    };

    class IBinaryOperationTransition {
        virtual ExpressionBuilderApi::PostBinaryOperationStep equals() =0;
        virtual ExpressionBuilderApi::PostBinaryOperationStep lessThan() =0;
        virtual ExpressionBuilderApi::PostBinaryOperationStep lessThanOrEqual() =0;
        virtual ExpressionBuilderApi::PostBinaryOperationStep greaterThan() =0;
        virtual ExpressionBuilderApi::PostBinaryOperationStep greaterThanOrEqual() =0;
        virtual ExpressionBuilderApi::PostBinaryOperationStep _and() =0;
        virtual ExpressionBuilderApi::PostBinaryOperationStep _or() =0;
        virtual ExpressionBuilderApi::PostBinaryOperationStep plus() =0;
        virtual ExpressionBuilderApi::PostBinaryOperationStep minus() =0;
    };

    class IBuildExpressionTransformation {
        virtual Types::Expression build() =0;
    };

    class PostExpressionStep : public IBuildExpressionTransformation, public IBinaryOperationTransition {
        private:
         ExpressionBuilderImpl::Content content;

        public:
        PostExpressionStep(ExpressionBuilderImpl::Content _content);
        Types::Expression build() override;
        ExpressionBuilderApi::PostBinaryOperationStep equals() override;
        ExpressionBuilderApi::PostBinaryOperationStep lessThan() override;
        ExpressionBuilderApi::PostBinaryOperationStep lessThanOrEqual() override;
        ExpressionBuilderApi::PostBinaryOperationStep greaterThan() override;
        ExpressionBuilderApi::PostBinaryOperationStep greaterThanOrEqual() override;
        ExpressionBuilderApi::PostBinaryOperationStep _and() override;
        ExpressionBuilderApi::PostBinaryOperationStep _or() override;
        ExpressionBuilderApi::PostBinaryOperationStep plus() override;
        ExpressionBuilderApi::PostBinaryOperationStep minus() override;
    };
    class PostBinaryOperationStep : public IExpressionTransition {
        private:
         ExpressionBuilderImpl::Content content;

        public:
        PostBinaryOperationStep(ExpressionBuilderImpl::Content _content);
        ExpressionBuilderApi::PostExpressionStep tableColumn(std::string table, std::string column) override;
        ExpressionBuilderApi::PostExpressionStep column(std::string column) override;
        ExpressionBuilderApi::PostExpressionStep string(std::string value) override;
        ExpressionBuilderApi::PostExpressionStep number(int value) override;
        ExpressionBuilderApi::PostExpressionStep expression(Types::Expression expression) override;
    };
    class ExpressionStep : public IExpressionTransition {
        private:
         ExpressionBuilderImpl::Content content;

        public:
        ExpressionStep(ExpressionBuilderImpl::Content _content);
        ExpressionBuilderApi::PostExpressionStep tableColumn(std::string table, std::string column) override;
        ExpressionBuilderApi::PostExpressionStep column(std::string column) override;
        ExpressionBuilderApi::PostExpressionStep string(std::string value) override;
        ExpressionBuilderApi::PostExpressionStep number(int value) override;
        ExpressionBuilderApi::PostExpressionStep expression(Types::Expression expression) override;
    };
};
}


// GENERATED BY METAGEN
#pragma once

#include <memory>
#include <string>
#include <vector>
#include <sstream>

namespace sql {

class QueryBuilderImpl  {
    public:
    class Content;
    class Logic;

    class Content  {
    public:
        std::shared_ptr<std::ostringstream> query;

        Content() {
            query = std::make_shared<std::ostringstream>();
        }
    };
    class Logic  {

        public:
        static void selectTransitionSelect(QueryBuilderImpl::Content content, std::vector<std::string> columns);
        static void fromTransitionFrom(QueryBuilderImpl::Content content, std::string table);
        static void whereTransitionWhere(QueryBuilderImpl::Content content, std::string expression);
        static void groupByTransitionGroupBy(QueryBuilderImpl::Content content, std::string column);
        static void orderByTransitionOrderBy(QueryBuilderImpl::Content content, std::vector<std::string> columns);
        static void orderDirectionTransitionAsc(QueryBuilderImpl::Content content);
        static void orderDirectionTransitionDesc(QueryBuilderImpl::Content content);
        static std::string buildQueryTransformationBuild(QueryBuilderImpl::Content content);
    };
};
}

